/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.eqa.formula.screen;

import com.eqa.formula.DataBase.ConnectionWithFirebase;
import com.eqa.formula.DataBase.FormulasInfo;
import com.eqa.formula.DataBase.GetPlantas;
import com.eqa.formula.DataBase.database;

import com.google.common.io.Files;
import com.google.gson.Gson;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.ProtocolException;
import java.util.Date;

import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

/**
 *
 * @author Abdullah_PC
 */
public class SelectPlanta extends javax.swing.JFrame {
 String []IdPlantas;
 String []des;
 String IdPlanta,desc;
 FormulasInfo formulasInfo;
    /**
     * Creates new form SelectPlanta
     * @throws java.net.ProtocolException
     * @throws org.json.simple.parser.ParseException
     */
    public SelectPlanta() throws ProtocolException, ParseException, IOException {
        initComponents();
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width/2-this.getSize().width/2, dim.height/2-this.getSize().height/2);
     try {
         
          getIdPlanta();
          
     } 
     catch (IOException ex) {
         Logger.getLogger(SelectPlanta.class.getName()).log(Level.SEVERE, null, ex);
     } 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        comboPlantas = new javax.swing.JComboBox<>();
        comboVersion = new javax.swing.JComboBox<>();
        btoNuevosFormulas = new javax.swing.JButton();
        btoIportatFormulas = new javax.swing.JButton();
        btoNuevosFormulas1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        comboPlantas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Elige Planta" }));
        comboPlantas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                comboPlantasMouseClicked(evt);
            }
        });
        comboPlantas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboPlantasActionPerformed(evt);
            }
        });

        comboVersion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Elige Version" }));
        comboVersion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboVersionActionPerformed(evt);
            }
        });

        btoNuevosFormulas.setText("Nuevas Formulas");
        btoNuevosFormulas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btoNuevosFormulasActionPerformed(evt);
            }
        });

        btoIportatFormulas.setText("importar Formulas");
        btoIportatFormulas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btoIportatFormulasActionPerformed(evt);
            }
        });

        btoNuevosFormulas1.setText("Abrir PDF");
        btoNuevosFormulas1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btoNuevosFormulas1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(comboPlantas, 0, 314, Short.MAX_VALUE)
                    .addComponent(comboVersion, 0, 314, Short.MAX_VALUE)
                    .addComponent(btoNuevosFormulas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btoIportatFormulas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btoNuevosFormulas1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(40, 40, 40))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(comboPlantas, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(comboVersion, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addComponent(btoIportatFormulas)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btoNuevosFormulas)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btoNuevosFormulas1)
                .addContainerGap(52, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btoIportatFormulasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btoIportatFormulasActionPerformed
        // TODO add your handling code here:
       
          if(comboPlantas.getSelectedIndex()==0||comboVersion.getSelectedIndex()==0)
        {
            JOptionPane.showMessageDialog(null, "Elige una planta y una version, por favor");
            throw new IllegalAccessError("Elige una planta y una version, por favor");
        }
        
        if(comboVersion.getItemCount()>0&&comboVersion.getSelectedIndex()>0){
        Deletall();
        // TODO add your handling code here:
        String result;
            try {
                result = GetResult();
                GetFormulasFromCloud(result);
                for(int i=0;i<formulasInfo.getStore().size();i++)
                      new database().SaveDate(formulasInfo.getStore().get(i));
            } catch (IOException ex) {
                Logger.getLogger(SelectPlanta.class.getName()).log(Level.SEVERE, null, ex);
            }
        
        this.dispose();
        new Alta(IdPlanta, desc).setVisible(true);
        }
    }//GEN-LAST:event_btoIportatFormulasActionPerformed

    private void btoNuevosFormulasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btoNuevosFormulasActionPerformed
        // TODO add your handling code here:
        if(comboPlantas.getSelectedIndex()>0){
        Deletall();
        this.dispose();
        new Alta(IdPlanta, desc).setVisible(true);
        }
        else
            JOptionPane.showMessageDialog(null, "Elige Una Planta, por favor.");
    }//GEN-LAST:event_btoNuevosFormulasActionPerformed

    private void comboPlantasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboPlantasActionPerformed
     try {
         // TODO add your handling code here:
        if(comboPlantas.getItemCount()>0&&comboPlantas.getSelectedIndex()>0){
         GetPlantas getPlantas=new GetPlantas(IdPlantas[comboPlantas.getSelectedIndex()-1]);
         int versions= getPlantas.getVersion();
         comboVersion.removeAllItems();
       DefaultComboBoxModel mod = new DefaultComboBoxModel();
       mod.addElement("Elige Version");
       for(int i=versions;0<i;i--)
           mod.addElement("V"+i);
       comboVersion.setModel(mod);
        
        IdPlanta=IdPlantas[comboPlantas.getSelectedIndex()-1];
        desc=des[comboPlantas.getSelectedIndex()-1];
        
        }
          
     } catch (IOException ex) {
         Logger.getLogger(SelectPlanta.class.getName()).log(Level.SEVERE, null, ex);
     }
    }//GEN-LAST:event_comboPlantasActionPerformed

    private void comboPlantasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_comboPlantasMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_comboPlantasMouseClicked

    private void comboVersionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboVersionActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_comboVersionActionPerformed

    private void btoNuevosFormulas1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btoNuevosFormulas1ActionPerformed
        if(comboPlantas.getSelectedIndex()==0||comboVersion.getSelectedIndex()==0)
        {
            JOptionPane.showMessageDialog(null, "Elige una planta y una version, por favor");
            throw new IllegalAccessError("Elige una planta y una version, por favor");
        }
        
        try {
         // TODO add your handling code here:
        
         String result = GetResult();
         GetFormulasFromCloud(result);
        
        String pdfpath=comboPlantas.getSelectedItem()+""+new Date().getTime()+".pdf";
         File file = new File(pdfpath);
        
         byte[] encoded = org.apache.commons.codec.binary.Base64.decodeBase64(formulasInfo.getPDF());
         Files.write(encoded, file);
         Desktop.getDesktop().open(file);
     } catch (IOException ex) {
         Logger.getLogger(SelectPlanta.class.getName()).log(Level.SEVERE, null, ex);
     }
        
    }//GEN-LAST:event_btoNuevosFormulas1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SelectPlanta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SelectPlanta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SelectPlanta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SelectPlanta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new SelectPlanta().setVisible(true);
                } catch (ProtocolException ex) {
                    Logger.getLogger(SelectPlanta.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(SelectPlanta.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ParseException ex) {
                    Logger.getLogger(SelectPlanta.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
    public void Deletall(){
        database d=new database();
        d.deleteall();
    }
    public String ReadJsonFile(String st) throws IOException{
        String s= "";
        String sb="";
        
        String IdPlantaFileName = ".\\resources\\"+st+".json";
        try
        {
              FileInputStream ip=new FileInputStream(IdPlantaFileName);
           //InputStream is = getClass().getClassLoader().getResourceAsStream(SQLFileName);
            BufferedReader reader = new BufferedReader(new InputStreamReader(ip)) ;
                while((s = reader.readLine()) != null)
                {
                    sb=sb+s+"\n";
                }
            }
    
 
        catch(IOException e)
        {
        }
        return  sb;
    }
     private void getIdPlanta() throws IOException, ParseException{
            	JSONParser parser = new JSONParser();
             
                try{
                     Object obj = parser.parse(ReadJsonFile("IdPlanta"));
                     
                        JSONArray array = new JSONArray();
                        array.put(obj);
                        JSONArray array1 = new JSONArray(array.get(0).toString());
                        IdPlantas=new String[array1.length()];
                        des=new String[array1.length()];
                        
                        for(int i=0;i<array1.length();i++)
                        {
                            org.json.JSONObject jjson = array1.getJSONObject(i);
                            IdPlantas[i] = jjson.getString("idPlanta");
                            des[i]=jjson.getString("Descripcion");
  
                        }
                    
                    combofill();
                }catch(ParseException | JSONException ex){
                    System.out.println(ex);
                }
           
            
        }
     private void combofill() {
       comboPlantas.removeAllItems();
       DefaultComboBoxModel mod = new DefaultComboBoxModel();
       
       mod.addElement("Elige Planta");
     for (String de : des) {
         mod.addElement(de);
     }
       comboPlantas.setModel(mod);
           
    }
     
     public void GetFormulasFromCloud(String result){
         
         
         Gson g=new Gson();
         JsonObject jsonObject = new JsonParser().parse(result).getAsJsonObject();
         formulasInfo=g.fromJson(jsonObject.toString(), FormulasInfo.class);
       
     }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btoIportatFormulas;
    private javax.swing.JButton btoNuevosFormulas;
    private javax.swing.JButton btoNuevosFormulas1;
    private javax.swing.JComboBox<String> comboPlantas;
    private javax.swing.JComboBox<String> comboVersion;
    // End of variables declaration//GEN-END:variables

    private String GetResult() throws IOException {
       
       String result="{}";
        if(!IdPlanta.isEmpty()&&comboVersion.getSelectedIndex()>0){
        JSONObject json = new JSONObject();
        json.put("idPlanta",IdPlanta);
        int v=(comboVersion.getItemCount()-comboVersion.getSelectedIndex());
       
        json.put("Version",v+"");
        //System.out.println(IdPlanta.toString());
         result= new ConnectionWithFirebase(json.toString(),"GetFormulas").getResult();
        }
        return result;
    }
}
